{"/home/travis/build/npmtest/node-npmtest-angular2-moment/test.js":"/* istanbul instrument in package npmtest_angular2_moment */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-moment/lib.npmtest_angular2_moment.js":"/* istanbul instrument in package npmtest_angular2_moment */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_angular2_moment = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_angular2_moment = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-moment/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-angular2-moment && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_angular2_moment */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_angular2_moment\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_angular2_moment.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_angular2_moment.rollup.js'] =\n            local.assetsDict['/assets.npmtest_angular2_moment.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_angular2_moment.__dirname + '/lib.npmtest_angular2_moment.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-moment/node_modules/angular2-moment/index.js":"\"use strict\";\r\nvar add_pipe_1 = require('./add.pipe');\r\nexports.AddPipe = add_pipe_1.AddPipe;\r\nvar calendar_pipe_1 = require('./calendar.pipe');\r\nexports.CalendarPipe = calendar_pipe_1.CalendarPipe;\r\nvar date_format_pipe_1 = require('./date-format.pipe');\r\nexports.DateFormatPipe = date_format_pipe_1.DateFormatPipe;\r\nvar difference_pipe_1 = require('./difference.pipe');\r\nexports.DifferencePipe = difference_pipe_1.DifferencePipe;\r\nvar duration_pipe_1 = require('./duration.pipe');\r\nexports.DurationPipe = duration_pipe_1.DurationPipe;\r\nvar from_unix_pipe_1 = require('./from-unix.pipe');\r\nexports.FromUnixPipe = from_unix_pipe_1.FromUnixPipe;\r\nvar moment_module_1 = require('./moment.module');\r\nexports.MomentModule = moment_module_1.MomentModule;\r\nvar subtract_pipe_1 = require('./subtract.pipe');\r\nexports.SubtractPipe = subtract_pipe_1.SubtractPipe;\r\nvar time_ago_pipe_1 = require('./time-ago.pipe');\r\nexports.TimeAgoPipe = time_ago_pipe_1.TimeAgoPipe;\r\nvar utc_pipe_1 = require('./utc.pipe');\r\nexports.UtcPipe = utc_pipe_1.UtcPipe;\r\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-angular2-moment/node_modules/angular2-moment/add.pipe.js":"/* angular2-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\r\n\"use strict\";\r\nvar core_1 = require('@angular/core');\r\nvar moment = require('moment');\r\nvar AddPipe = (function () {\r\n    function AddPipe() {\r\n    }\r\n    AddPipe.prototype.transform = function (value, amount, unit) {\r\n        if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {\r\n            throw new Error('AddPipe: missing required arguments');\r\n        }\r\n        return moment(value).add(amount, unit);\r\n    };\r\n    AddPipe.decorators = [\r\n        { type: core_1.Pipe, args: [{ name: 'amAdd' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    AddPipe.ctorParameters = [];\r\n    return AddPipe;\r\n}());\r\nexports.AddPipe = AddPipe;\r\n//# sourceMappingURL=add.pipe.js.map","/home/travis/build/npmtest/node-npmtest-angular2-moment/node_modules/angular2-moment/calendar.pipe.js":"/* angular2-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\r\n\"use strict\";\r\nvar core_1 = require('@angular/core');\r\nvar moment = require('moment');\r\n// under systemjs, moment is actually exported as the default export, so we account for that\r\nvar momentConstructor = moment.default || moment;\r\nvar CalendarPipe = (function () {\r\n    function CalendarPipe(cdRef, ngZone) {\r\n        var _this = this;\r\n        this.cdRef = cdRef;\r\n        this.ngZone = ngZone;\r\n        // using a single static timer for all instances of this pipe for performance reasons\r\n        CalendarPipe.initTimer(ngZone);\r\n        CalendarPipe.refs++;\r\n        // values such as Today will need to be replaced with Yesterday after midnight,\r\n        // so make sure we subscribe to an EventEmitter that we set up to emit at midnight\r\n        this.midnightSub = CalendarPipe.midnight.subscribe(function () {\r\n            _this.ngZone.run(function () { return _this.cdRef.markForCheck(); });\r\n        });\r\n    }\r\n    CalendarPipe.prototype.transform = function (value) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        var formats = null;\r\n        var referenceTime = null;\r\n        for (var i = 0, len = args.length; i < len; i++) {\r\n            if (args[i] !== null) {\r\n                if (typeof args[i] === 'object' && !moment.isMoment(args[i])) {\r\n                    formats = args[i];\r\n                }\r\n                else {\r\n                    referenceTime = momentConstructor(args[i]);\r\n                }\r\n            }\r\n        }\r\n        return momentConstructor(value).calendar(referenceTime, formats);\r\n    };\r\n    CalendarPipe.prototype.ngOnDestroy = function () {\r\n        if (CalendarPipe.refs > 0) {\r\n            CalendarPipe.refs--;\r\n        }\r\n        if (CalendarPipe.refs === 0) {\r\n            CalendarPipe.removeTimer();\r\n        }\r\n        this.midnightSub.unsubscribe();\r\n    };\r\n    CalendarPipe.initTimer = function (ngZone) {\r\n        // initialize the timer\r\n        if (!CalendarPipe.midnight) {\r\n            CalendarPipe.midnight = new core_1.EventEmitter();\r\n            if (typeof window !== 'undefined') {\r\n                var timeToUpdate_1 = CalendarPipe._getMillisecondsUntilUpdate();\r\n                CalendarPipe.timer = ngZone.runOutsideAngular(function () {\r\n                    return window.setTimeout(function () {\r\n                        // emit the current date\r\n                        CalendarPipe.midnight.emit(new Date());\r\n                        // refresh the timer\r\n                        CalendarPipe.removeTimer();\r\n                        CalendarPipe.initTimer(ngZone);\r\n                    }, timeToUpdate_1);\r\n                });\r\n            }\r\n        }\r\n    };\r\n    CalendarPipe.removeTimer = function () {\r\n        if (CalendarPipe.timer) {\r\n            window.clearTimeout(CalendarPipe.timer);\r\n            CalendarPipe.timer = null;\r\n            CalendarPipe.midnight = null;\r\n        }\r\n    };\r\n    CalendarPipe._getMillisecondsUntilUpdate = function () {\r\n        var now = momentConstructor();\r\n        var tomorrow = momentConstructor().startOf('day').add(1, 'days');\r\n        var timeToMidnight = tomorrow.valueOf() - now.valueOf();\r\n        return timeToMidnight + 1000; // 1 second after midnight\r\n    };\r\n    /**\r\n     * @private Internal reference counter, so we can clean up when no instances are in use\r\n     * @type {number}\r\n     */\r\n    CalendarPipe.refs = 0;\r\n    CalendarPipe.decorators = [\r\n        { type: core_1.Pipe, args: [{ name: 'amCalendar', pure: false },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CalendarPipe.ctorParameters = [\r\n        { type: core_1.ChangeDetectorRef, },\r\n        { type: core_1.NgZone, },\r\n    ];\r\n    return CalendarPipe;\r\n}());\r\nexports.CalendarPipe = CalendarPipe;\r\n//# sourceMappingURL=calendar.pipe.js.map","/home/travis/build/npmtest/node-npmtest-angular2-moment/node_modules/angular2-moment/date-format.pipe.js":"/* angular2-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\r\n\"use strict\";\r\nvar core_1 = require('@angular/core');\r\nvar moment = require('moment');\r\n// under systemjs, moment is actually exported as the default export, so we account for that\r\nvar momentConstructor = moment.default || moment;\r\nvar DateFormatPipe = (function () {\r\n    function DateFormatPipe() {\r\n    }\r\n    DateFormatPipe.prototype.transform = function (value) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (!value)\r\n            return '';\r\n        return momentConstructor(value).format(args[0]);\r\n    };\r\n    DateFormatPipe.decorators = [\r\n        { type: core_1.Pipe, args: [{ name: 'amDateFormat' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    DateFormatPipe.ctorParameters = [];\r\n    return DateFormatPipe;\r\n}());\r\nexports.DateFormatPipe = DateFormatPipe;\r\n//# sourceMappingURL=date-format.pipe.js.map","/home/travis/build/npmtest/node-npmtest-angular2-moment/node_modules/angular2-moment/difference.pipe.js":"/* angular2-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\r\n\"use strict\";\r\nvar core_1 = require('@angular/core');\r\nvar moment = require('moment');\r\n// under systemjs, moment is actually exported as the default export, so we account for that\r\nvar momentConstructor = moment.default || moment;\r\nvar DifferencePipe = (function () {\r\n    function DifferencePipe() {\r\n    }\r\n    DifferencePipe.prototype.transform = function (value, otherValue, unit, precision) {\r\n        var date = momentConstructor(value);\r\n        var date2 = (otherValue !== null) ? momentConstructor(otherValue) : momentConstructor();\r\n        return date.diff(date2, unit, precision);\r\n    };\r\n    DifferencePipe.decorators = [\r\n        { type: core_1.Pipe, args: [{ name: 'amDifference' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    DifferencePipe.ctorParameters = [];\r\n    return DifferencePipe;\r\n}());\r\nexports.DifferencePipe = DifferencePipe;\r\n//# sourceMappingURL=difference.pipe.js.map","/home/travis/build/npmtest/node-npmtest-angular2-moment/node_modules/angular2-moment/duration.pipe.js":"\"use strict\";\r\nvar core_1 = require('@angular/core');\r\nvar moment = require('moment');\r\nvar DurationPipe = (function () {\r\n    function DurationPipe() {\r\n    }\r\n    DurationPipe.prototype.transform = function (value) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (typeof args === 'undefined' || args.length !== 1) {\r\n            throw new Error('DurationPipe: missing required time unit argument');\r\n        }\r\n        return moment.duration(value, args[0]).humanize();\r\n    };\r\n    DurationPipe.decorators = [\r\n        { type: core_1.Pipe, args: [{ name: 'amDuration' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    DurationPipe.ctorParameters = [];\r\n    return DurationPipe;\r\n}());\r\nexports.DurationPipe = DurationPipe;\r\n//# sourceMappingURL=duration.pipe.js.map","/home/travis/build/npmtest/node-npmtest-angular2-moment/node_modules/angular2-moment/from-unix.pipe.js":"/* angular2-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\r\n\"use strict\";\r\nvar core_1 = require('@angular/core');\r\nvar moment = require('moment');\r\nvar FromUnixPipe = (function () {\r\n    function FromUnixPipe() {\r\n    }\r\n    FromUnixPipe.prototype.transform = function (value) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        if (typeof value === 'string') {\r\n            value = +value;\r\n        }\r\n        return moment.unix(value);\r\n    };\r\n    FromUnixPipe.decorators = [\r\n        { type: core_1.Pipe, args: [{ name: 'amFromUnix' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    FromUnixPipe.ctorParameters = [];\r\n    return FromUnixPipe;\r\n}());\r\nexports.FromUnixPipe = FromUnixPipe;\r\n//# sourceMappingURL=from-unix.pipe.js.map","/home/travis/build/npmtest/node-npmtest-angular2-moment/node_modules/angular2-moment/moment.module.js":"\"use strict\";\r\nvar core_1 = require('@angular/core');\r\nvar add_pipe_1 = require('./add.pipe');\r\nvar calendar_pipe_1 = require('./calendar.pipe');\r\nvar date_format_pipe_1 = require('./date-format.pipe');\r\nvar difference_pipe_1 = require('./difference.pipe');\r\nvar duration_pipe_1 = require('./duration.pipe');\r\nvar from_unix_pipe_1 = require('./from-unix.pipe');\r\nvar subtract_pipe_1 = require('./subtract.pipe');\r\nvar time_ago_pipe_1 = require('./time-ago.pipe');\r\nvar utc_pipe_1 = require('./utc.pipe');\r\nvar ANGULAR_MOMENT_PIPES = [\r\n    add_pipe_1.AddPipe,\r\n    calendar_pipe_1.CalendarPipe,\r\n    date_format_pipe_1.DateFormatPipe,\r\n    difference_pipe_1.DifferencePipe,\r\n    duration_pipe_1.DurationPipe,\r\n    from_unix_pipe_1.FromUnixPipe,\r\n    subtract_pipe_1.SubtractPipe,\r\n    time_ago_pipe_1.TimeAgoPipe,\r\n    utc_pipe_1.UtcPipe\r\n];\r\nvar MomentModule = (function () {\r\n    function MomentModule() {\r\n    }\r\n    MomentModule.decorators = [\r\n        { type: core_1.NgModule, args: [{\r\n                    declarations: ANGULAR_MOMENT_PIPES,\r\n                    exports: ANGULAR_MOMENT_PIPES\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MomentModule.ctorParameters = [];\r\n    return MomentModule;\r\n}());\r\nexports.MomentModule = MomentModule;\r\n//# sourceMappingURL=moment.module.js.map","/home/travis/build/npmtest/node-npmtest-angular2-moment/node_modules/angular2-moment/subtract.pipe.js":"/* angular2-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\r\n\"use strict\";\r\nvar core_1 = require('@angular/core');\r\nvar moment = require('moment');\r\nvar SubtractPipe = (function () {\r\n    function SubtractPipe() {\r\n    }\r\n    SubtractPipe.prototype.transform = function (value, amount, unit) {\r\n        if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {\r\n            throw new Error('SubtractPipe: missing required arguments');\r\n        }\r\n        return moment(value).subtract(amount, unit);\r\n    };\r\n    SubtractPipe.decorators = [\r\n        { type: core_1.Pipe, args: [{ name: 'amSubtract' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    SubtractPipe.ctorParameters = [];\r\n    return SubtractPipe;\r\n}());\r\nexports.SubtractPipe = SubtractPipe;\r\n//# sourceMappingURL=subtract.pipe.js.map","/home/travis/build/npmtest/node-npmtest-angular2-moment/node_modules/angular2-moment/time-ago.pipe.js":"/* angular2-moment (c) 2015, 2016 Uri Shaked / MIT Licence */\r\n\"use strict\";\r\nvar core_1 = require('@angular/core');\r\nvar moment = require('moment');\r\n// under systemjs, moment is actually exported as the default export, so we account for that\r\nvar momentConstructor = moment.default || moment;\r\nvar TimeAgoPipe = (function () {\r\n    function TimeAgoPipe(cdRef, ngZone) {\r\n        this.cdRef = cdRef;\r\n        this.ngZone = ngZone;\r\n    }\r\n    TimeAgoPipe.prototype.transform = function (value, omitSuffix) {\r\n        if (this.hasChanged(value, omitSuffix)) {\r\n            this.lastTime = this.getTime(value);\r\n            this.lastValue = value;\r\n            this.lastOmitSuffix = omitSuffix;\r\n            this.removeTimer();\r\n            this.createTimer();\r\n            this.lastText = momentConstructor(value).from(momentConstructor(), omitSuffix);\r\n        }\r\n        else {\r\n            this.createTimer();\r\n        }\r\n        return this.lastText;\r\n    };\r\n    TimeAgoPipe.prototype.ngOnDestroy = function () {\r\n        this.removeTimer();\r\n    };\r\n    TimeAgoPipe.prototype.createTimer = function () {\r\n        var _this = this;\r\n        if (this.currentTimer) {\r\n            return;\r\n        }\r\n        var momentInstance = momentConstructor(this.lastValue);\r\n        var timeToUpdate = this.getSecondsUntilUpdate(momentInstance) * 1000;\r\n        this.currentTimer = this.ngZone.runOutsideAngular(function () {\r\n            if (typeof window !== 'undefined') {\r\n                return window.setTimeout(function () {\r\n                    _this.lastText = momentConstructor(_this.lastValue).from(momentConstructor(), _this.lastOmitSuffix);\r\n                    _this.currentTimer = null;\r\n                    _this.ngZone.run(function () { return _this.cdRef.markForCheck(); });\r\n                }, timeToUpdate);\r\n            }\r\n        });\r\n    };\r\n    TimeAgoPipe.prototype.removeTimer = function () {\r\n        if (this.currentTimer) {\r\n            window.clearTimeout(this.currentTimer);\r\n            this.currentTimer = null;\r\n        }\r\n    };\r\n    TimeAgoPipe.prototype.getSecondsUntilUpdate = function (momentInstance) {\r\n        var howOld = Math.abs(momentConstructor().diff(momentInstance, 'minute'));\r\n        if (howOld < 1) {\r\n            return 1;\r\n        }\r\n        else if (howOld < 60) {\r\n            return 30;\r\n        }\r\n        else if (howOld < 180) {\r\n            return 300;\r\n        }\r\n        else {\r\n            return 3600;\r\n        }\r\n    };\r\n    TimeAgoPipe.prototype.hasChanged = function (value, omitSuffix) {\r\n        return this.getTime(value) !== this.lastTime || omitSuffix !== this.lastOmitSuffix;\r\n    };\r\n    TimeAgoPipe.prototype.getTime = function (value) {\r\n        if (moment.isDate(value)) {\r\n            return value.getTime();\r\n        }\r\n        else if (moment.isMoment(value)) {\r\n            return value.valueOf();\r\n        }\r\n        else {\r\n            return momentConstructor(value).valueOf();\r\n        }\r\n    };\r\n    TimeAgoPipe.decorators = [\r\n        { type: core_1.Pipe, args: [{ name: 'amTimeAgo', pure: false },] },\r\n    ];\r\n    /** @nocollapse */\r\n    TimeAgoPipe.ctorParameters = [\r\n        { type: core_1.ChangeDetectorRef, },\r\n        { type: core_1.NgZone, },\r\n    ];\r\n    return TimeAgoPipe;\r\n}());\r\nexports.TimeAgoPipe = TimeAgoPipe;\r\n//# sourceMappingURL=time-ago.pipe.js.map","/home/travis/build/npmtest/node-npmtest-angular2-moment/node_modules/angular2-moment/utc.pipe.js":"\"use strict\";\r\nvar core_1 = require('@angular/core');\r\nvar moment = require('moment');\r\n// under systemjs, moment is actually exported as the default export, so we account for that\r\nvar momentConstructor = moment.default || moment;\r\nvar UtcPipe = (function () {\r\n    function UtcPipe() {\r\n    }\r\n    UtcPipe.prototype.transform = function (value) {\r\n        return moment(value).utc();\r\n    };\r\n    UtcPipe.decorators = [\r\n        { type: core_1.Pipe, args: [{ name: 'amUtc' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    UtcPipe.ctorParameters = [];\r\n    return UtcPipe;\r\n}());\r\nexports.UtcPipe = UtcPipe;\r\n//# sourceMappingURL=utc.pipe.js.map"}